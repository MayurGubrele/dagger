"use strict";(self.webpackChunkdagger=self.webpackChunkdagger||[]).push([[5164],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=u(n),f=o,m=l["".concat(c,".").concat(f)]||l[f]||p[f]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},7771:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return l},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},c="ADD UDF",u={unversionedId:"contribute/add_udf",id:"contribute/add_udf",isDocsHomePage:!1,title:"ADD UDF",description:"Want a function to use in SQL which is not supported both by Flink and one of the pre-supported udfs? You can simply write your User-Defined function and contribute to the dagger. Read more on how to use UDFs here.",source:"@site/docs/contribute/add_udf.md",sourceDirName:"contribute",slug:"/contribute/add_udf",permalink:"/dagger/docs/contribute/add_udf",editUrl:"https://github.com/odpf/dagger/edit/master/docs/docs/contribute/add_udf.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"ADD Transformer",permalink:"/dagger/docs/contribute/add_transformer"}},d=[],p={toc:d};function l(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"add-udf"},"ADD UDF"),(0,a.kt)("p",null,"Want a function to use in SQL which is not supported both by Flink and one of the pre-supported udfs? You can simply write your User-Defined function and contribute to the dagger. Read more on how to use UDFs ",(0,a.kt)("a",{parentName:"p",href:"/dagger/docs/guides/use_udf"},"here"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Note"),": ",(0,a.kt)("em",{parentName:"p"},"Please go through the ",(0,a.kt)("a",{parentName:"em",href:"/dagger/docs/contribute/contribution"},"Contribution guide")," to know about all the conventions and practices we tend to follow and to know about the contribution process to the dagger.")),(0,a.kt)("p",null,"For adding custom UDFs follow these steps"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Ensure none of the ",(0,a.kt)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-master/docs/dev/table/functions/systemfunctions"},"built-in functions")," or ",(0,a.kt)("a",{parentName:"p",href:"/dagger/docs/reference/udfs"},"existing UDF")," suits your requirement.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For adding a UDF, figure out which type of UDF you required. Flink supports three types of ",(0,a.kt)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/table/udfs.html"},"User defined function"),". Choose one of them according to the requirement.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For getting more insights on writing your UDF, follow ",(0,a.kt)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/table/udfs.html"},"this")," to create a UDF. It needs to be written in Java/Scala.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"UDF need to be the ",(0,a.kt)("inlineCode",{parentName:"p"},"function-type")," directory inside ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/dagger/tree/main/dagger-functions/src/main/java/io/odpf/dagger/functions/udfs"},"this")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"dagger-functions")," subproject.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Extend either of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/dagger/blob/main/dagger-common/src/main/java/io/odpf/dagger/common/udfs/ScalarUdf.java"},"ScalarUdf"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/dagger/blob/main/dagger-common/src/main/java/io/odpf/dagger/common/udfs/TableUdf.java"},"TableUdf")," or ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/dagger/blob/main/dagger-common/src/main/java/io/odpf/dagger/common/udfs/AggregateUdf.java"},"AggregateUdf")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"dagger-common"),". They are boilerplate contracts extending Flink UDF classes. These classes do some more preprocessing(like exposing some metrics) in the ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," method behind the scene.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Register the UDF in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/dagger/blob/main/dagger-functions/src/main/java/io/odpf/dagger/functions/udfs/factories/FunctionFactory.java"},"this")," class. This is required to let Flink know about your function.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Bump up the version and raise a PR for the same. Also please add the registered function to the ",(0,a.kt)("a",{parentName:"p",href:"/dagger/docs/reference/udfs"},"list of udfs doc"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If you have some business-specific use-cases and you don't want to add UDFs to the open-sourced repo, you can have a separate local codebase for those UDFs. Those UDFs need to be registered in a similar class like the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/odpf/dagger/blob/main/dagger-common/src/main/java/io/odpf/dagger/common/udfs/UdfFactory.java"},(0,a.kt)("inlineCode",{parentName:"a"},"UDFFactory")),". Keep both the UDF classes and the factory class in the classpath of Dagger. Configure the fully qualified Factory class in the ",(0,a.kt)("inlineCode",{parentName:"p"},"FUNCTION_FACTORY_CLASSES")," parameter and you will be able to use the desired UDF in your query."))),(0,a.kt)("p",null,"In the subsequent release of the dagger, your functions should be useable in the query."))}l.isMDXComponent=!0}}]);